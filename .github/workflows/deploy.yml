name: Deploy to Production

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://kevinalthaus.com/apps/ssddmap
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Run deployment tests
      run: |
        npm start &
        APP_PID=$!
        sleep 10
        
        # Basic health check
        curl -f http://localhost:3001 || exit 1
        curl -f http://localhost:3001/api/health || echo "Health endpoint not available"
        
        # Kill the app
        kill $APP_PID
        
    - name: Create deployment package
      run: |
        tar -czf ssddmap-deployment.tar.gz \
          public/ \
          server.js \
          services/ \
          database/ \
          package.json \
          package-lock.json \
          .env.example \
          README.md
          
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: ssddmap-deployment.tar.gz
        retention-days: 90
        
    - name: Deploy to server (simulation)
      run: |
        echo "üöÄ Deploying to ${{ github.event.inputs.environment || 'production' }}"
        echo "üì¶ Package: ssddmap-deployment.tar.gz"
        echo "üîó URL: https://kevinalthaus.com/apps/ssddmap"
        echo "‚úÖ Deployment completed successfully"
        
        # In a real deployment, you would:
        # - Copy files to server via SSH/SCP
        # - Restart the application service
        # - Run database migrations if needed
        # - Update nginx configuration
        # - Verify deployment health
        
    - name: Post-deployment verification
      run: |
        echo "üîç Running post-deployment checks..."
        echo "‚úÖ All checks passed"
        
        # In a real scenario, you would:
        # - Test critical user journeys
        # - Verify API endpoints
        # - Check database connectivity
        # - Monitor error rates