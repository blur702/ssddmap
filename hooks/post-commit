#!/bin/bash

# SSDD Mapping Application - Post-commit Hook
# This hook runs additional checks and notifications after successful commits

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[POST-COMMIT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_status "Running post-commit checks..."

# Get commit information
COMMIT_HASH=$(git rev-parse HEAD)
COMMIT_MESSAGE=$(git log -1 --pretty=%B)
COMMIT_AUTHOR=$(git log -1 --pretty=%an)
COMMIT_DATE=$(git log -1 --pretty=%ad --date=short)

print_success "Commit successful!"
print_info "Commit: ${COMMIT_HASH:0:8}"
print_info "Author: $COMMIT_AUTHOR"
print_info "Date: $COMMIT_DATE"

# Check if we're ahead of origin
AHEAD_COUNT=$(git rev-list --count HEAD ^origin/master 2>/dev/null || echo "0")
if [ "$AHEAD_COUNT" -gt 0 ]; then
    print_warning "Your branch is $AHEAD_COUNT commit(s) ahead of origin/master"
    print_info "Consider pushing your changes: git push origin master"
fi

# Show files changed in this commit
CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)
if [ -n "$CHANGED_FILES" ]; then
    print_info "Files changed in this commit:"
    echo "$CHANGED_FILES" | sed 's/^/  /'
fi

# Check for specific file types and provide relevant information
if echo "$CHANGED_FILES" | grep -q "\.spec\.js$"; then
    print_info "Test files were modified. Consider running full test suite: npm test"
fi

if echo "$CHANGED_FILES" | grep -q "package\.json$"; then
    print_warning "package.json was modified. Consider running: npm ci"
    print_info "If dependencies changed, team members should run: npm ci"
fi

if echo "$CHANGED_FILES" | grep -q "\.github/workflows/"; then
    print_info "GitHub Actions workflows were modified"
    print_info "CI/CD pipeline will use new configuration on next push"
fi

if echo "$CHANGED_FILES" | grep -q "server\.js\|services/"; then
    print_warning "Server code was modified"
    print_info "Consider testing the application manually: npm start"
fi

# Run quick security check on committed files
print_status "Running post-commit security check..."

# Check for accidentally committed secrets
SECRET_CHECK=$(git show --name-only | grep -E '\.(js|json|env)$' | xargs git show HEAD: 2>/dev/null | grep -i "password\|secret\|key\|token" | grep -v "example\|sample\|placeholder\|test" || true)

if [ -n "$SECRET_CHECK" ]; then
    print_warning "Potential secrets detected in committed files:"
    echo "$SECRET_CHECK"
    print_warning "If these are real secrets, consider:"
    print_info "1. Remove them from the files"
    print_info "2. Add them to .env files (which are gitignored)"
    print_info "3. Use environment variables"
    print_info "4. Consider using git filter-branch to remove from history"
fi

# Reminder about CI/CD
if [ "$AHEAD_COUNT" -gt 0 ]; then
    print_info "Remember: CI/CD tests will run automatically when you push to GitHub"
    print_info "Local pre-commit tests passed, but full test suite runs on push"
fi

# Check if this looks like a significant commit
LINES_CHANGED=$(git diff HEAD~1 --numstat | awk '{added+=$1; deleted+=$2} END {print added+deleted}')
if [ -n "$LINES_CHANGED" ] && [ "$LINES_CHANGED" -gt 100 ]; then
    print_warning "Large commit detected ($LINES_CHANGED lines changed)"
    print_info "Consider:"
    print_info "1. Running comprehensive tests: npm test"
    print_info "2. Manual testing of affected features"
    print_info "3. Creating a PR for team review"
fi

# Show next steps
echo ""
print_success "Post-commit checks completed!"
print_info "Next steps:"
print_info "• Push changes: git push origin master"
print_info "• Run full tests: npm test"
print_info "• Start application: npm start"
print_info "• View recent commits: git log --oneline -5"

# Optional: Run additional background checks
if command -v npm &> /dev/null; then
    print_status "Running npm audit in background..."
    (npm audit --audit-level moderate >/dev/null 2>&1 && print_success "npm audit passed" || print_warning "npm audit found issues - run 'npm audit' to review") &
fi

exit 0