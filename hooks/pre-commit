#!/bin/bash

# SSDD Mapping Application - Pre-commit Hook
# This hook runs tests before allowing commits

set -e

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[PRE-COMMIT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    print_error "Not in project root directory"
    exit 1
fi

# Check if Node.js is available
if ! command -v node &> /dev/null; then
    print_error "Node.js is not installed"
    exit 1
fi

# Check if npm is available
if ! command -v npm &> /dev/null; then
    print_error "npm is not installed"
    exit 1
fi

print_status "Checking Node.js and npm versions..."
node --version
npm --version

# Install dependencies if node_modules doesn't exist
if [ ! -d "node_modules" ]; then
    print_status "Installing dependencies..."
    npm ci
fi

# Run ESLint on staged JavaScript files
print_status "Running ESLint on staged files..."
JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.js$' || true)

if [ -n "$JS_FILES" ]; then
    # Check if ESLint is available
    if ! command -v npx &> /dev/null; then
        print_warning "npx not available, falling back to syntax check..."
        for file in $JS_FILES; do
            if [ -f "$file" ]; then
                node -c "$file" || {
                    print_error "Syntax error in $file"
                    exit 1
                }
            fi
        done
        print_success "JavaScript syntax check passed"
    else
        # Run ESLint on staged files
        echo "$JS_FILES" | xargs npx eslint --max-warnings 0 || {
            print_error "ESLint found issues. Run 'npm run lint:fix' to auto-fix, or 'npm run lint:check' to see details"
            print_status "You can also run 'git commit --no-verify' to bypass linting (not recommended)"
            exit 1
        }
        print_success "ESLint checks passed"
    fi
else
    print_warning "No JavaScript files to lint"
fi

# Check for common issues
print_status "Checking for common issues..."

# Check for console.log in production files
CONSOLE_LOGS=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js)$' | xargs grep -l "console\.log" 2>/dev/null || true)
if [ -n "$CONSOLE_LOGS" ]; then
    print_warning "Found console.log statements in:"
    echo "$CONSOLE_LOGS"
    echo "Consider removing console.log statements before committing to production"
fi

# Check for TODO/FIXME comments
TODO_COMMENTS=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js)$' | xargs grep -l "TODO\|FIXME" 2>/dev/null || true)
if [ -n "$TODO_COMMENTS" ]; then
    print_warning "Found TODO/FIXME comments in:"
    echo "$TODO_COMMENTS"
fi

# Check for hardcoded secrets (basic check)
SECRET_PATTERNS="password.*=\|secret.*=\|[^a-zA-Z]key.*=\|token.*=\|api_key.*="
POTENTIAL_SECRETS=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.js$' | xargs grep -i "$SECRET_PATTERNS" 2>/dev/null | grep -v "example\|sample\|placeholder\|test\|\"keywords\"\|scripts\|integrity\|package-lock" || true)
if [ -n "$POTENTIAL_SECRETS" ]; then
    print_error "Potential hardcoded secrets found:"
    echo "$POTENTIAL_SECRETS"
    echo "Please review and remove any hardcoded secrets before committing"
    exit 1
fi

# Start the application server for testing
print_status "Starting application server..."
npm start &
SERVER_PID=$!

# Wait for server to start and check multiple times
for i in {1..6}; do
    sleep 5
    if curl -f http://localhost:3001/ssddmap >/dev/null 2>&1; then
        break
    elif [ $i -eq 6 ]; then
        print_error "Server failed to start on port 3001 after 30 seconds"
        kill $SERVER_PID 2>/dev/null || true
        exit 1
    fi
    print_status "Waiting for server... ($i/6)"
done

print_success "Server started successfully"

# Run quick health check
if curl -f http://localhost:3001/ssddmap/api/health >/dev/null 2>&1; then
    print_success "Health check passed"
else
    print_warning "Health endpoint not available (this may be normal)"
fi

# Run basic tests (quick subset)
print_status "Running quick test suite..."

# Check if Playwright is installed
if [ ! -d "node_modules/@playwright" ]; then
    print_status "Installing Playwright..."
    npx playwright install --with-deps
fi

# Run a subset of critical tests only (to keep pre-commit fast)
QUICK_TESTS="tests/basic-app-load.spec.js tests/js-error-debug.spec.js"
TEST_FAILED=0

for test in $QUICK_TESTS; do
    if [ -f "$test" ]; then
        print_status "Running $test..."
        # Update base URL for the sub-path deployment
        if PLAYWRIGHT_BASE_URL="http://localhost:3001/ssddmap" npx playwright test "$test" --reporter=line; then
            print_success "$test passed"
        else
            print_error "$test failed"
            TEST_FAILED=1
        fi
    fi
done

# Stop the server
kill $SERVER_PID 2>/dev/null || true
sleep 2

if [ $TEST_FAILED -eq 1 ]; then
    print_error "Some tests failed. Commit aborted."
    print_status "Run 'npm test' to see detailed test results"
    print_status "Use 'git commit --no-verify' to bypass pre-commit checks (not recommended)"
    exit 1
fi

print_success "All pre-commit checks passed!"
print_status "Proceeding with commit..."

exit 0